package handlers

import (
	"database/sql"
	"io"
	"io/ioutil"
	"net/http"

	"github.com/google/uuid"
	"github.com/hiteshVasisht99/excel-import/common"
	"github.com/hiteshVasisht99/excel-import/employeeDao"
	"github.com/hiteshVasisht99/excel-import/services"
	"github.com/redis/go-redis/v9"
)

var svc services.EmployeeService

func InitializeService(Db *sql.DB, rdb *redis.Client) {
	svc = services.EmployeeService{
		Dao: employeeDao.EmployeeDao{
			Db:  Db,
			Rdb: rdb,
		},
	}
}

func UploadFile(w http.ResponseWriter, r *http.Request) {

	//retrieves the file from the form data with the key "file"
	file, _, err := r.FormFile("file")
	if err != nil {
		http.Error(w, "Unable to process file", http.StatusBadRequest)
		return
	}
	defer file.Close()

	//Create a temporary file to save the uploaded file. something like upload-abc123.xlsx, where abc123 is a unique identifier generated by OS
	tempFile, err := ioutil.TempFile("", "upload-*.xlsx")
	if err != nil {
		http.Error(w, "Unable to create temp file", http.StatusInternalServerError)
		return
	}
	defer tempFile.Close()

	//Copy the contents of the uploaded file to the temporary file.
	_, err = io.Copy(tempFile, file)
	if err != nil {
		http.Error(w, "Unable to save file", http.StatusInternalServerError)
		return
	}

	records, err := common.ParseExcelFile(tempFile.Name())
	if err != nil {
		http.Error(w, "Unable to parse file", http.StatusInternalServerError)
		return
	}

	for _, record := range records {
		record.ID = uuid.NewString()
		err = svc.InsertRecord(record)
		if err != nil {
			http.Error(w, "Unable to insert record into MySQL", http.StatusInternalServerError)
			return
		}
		err = svc.CacheData(record)
		if err != nil {
			http.Error(w, "Unable to cache the data", http.StatusInternalServerError)
			return
		}
	}
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("Data uploaded successfully"))
}
